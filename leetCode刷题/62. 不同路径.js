// 一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。
// 机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。
// 问总共有多少条不同的路径？
// 例如，上图是一个7 x 3 的网格。有多少可能的路径？
// 说明：m 和 n 的值均不超过 100。
// 示例 1:
// 输入: m = 3, n = 2
// 输出: 3
// 解释:
// 从左上角开始，总共有 3 条路径可以到达右下角。
// 1. 向右 -> 向右 -> 向下
// 2. 向右 -> 向下 -> 向右
// 3. 向下 -> 向右 -> 向右
// 示例 2:
// 输入: m = 7, n = 3
// 输出: 28


// 用递归会超时
// 状态方程： arr[i][j] = arr[i-1][j] +arr[i][j-1]
// 边界 arr[i][0] = arr[0][j] =0
let uniquePaths = (m, n) => {
    let arr = new Array(); //先声明一维
    for (let i = 0; i < m; i++) { //一维长度为2
        arr[i] = new Array(); //再声明二维
        for (let j = 0; j < n; j++) { //二维长度为3
            arr[i][j] = 1; // 赋值，每个数组元素的值为i+j
        }
    }
    for (let i = 1; i < m; i++) {
        for (let j = 1; j < n; j++) {
            arr[i][j] = arr[i - 1][j] + arr[i][j - 1];
        }
    }
    return arr[m - 1][n - 1];

};
console.log(uniquePaths(3, 3));
